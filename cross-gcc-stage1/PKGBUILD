_realname=cross-gcc
_base_ver=14.0.0
pkgbase=${_realname}
pkgname=("${pkgbase}-stage1")
pkgver=14.0.0.r201747.bf177ed816e
pkgrel=1
pkgdesc="The GNU Compiler Collection (stage1)"
arch=('aarch64' 'i686' 'x86_64')
license=('spdx:GPL-2.0-or-later' 'spdx:GPL-3.0-or-later' 'spdx:LGPL-2.1-or-later' 'spdx:LGPL-3.0-or-later' 'spdx:GCC-exception-3.1' 'spdx:GFDL-1.3-or-later')
url="https://gcc.gnu.org/"
makedepends=('git'
             'gcc'
             'binutils'
             'autotools'
             'texinfo'
             'mpc-devel'
             'gmp-devel'
             'mpfr-devel'
             'isl-devel'
             'zlib-devel'
             'windows-default-manifest'
             'gperf'
             'flex')
options=('!emptydirs') # '!strip' 'debug')
source=("${_realname}"::"git+https://github.com/Windows-on-ARM-Experiments/gcc-woarm64.git#branch=woarm64"
        0001-Cygwin-use-SysV-ABI-on-x86_64.patch
        0002-Cygwin-add-dummy-pthread-tsaware-and-large-address-a.patch
        0003-Cygwin-handle-dllimport-properly-in-medium-model-V2.patch
        0004-Cygwin-MinGW-skip-test.patch
        0005-Cygwin-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENA.patch
        0006-Cygwin-fix-some-implicit-declaration-warnings-and-re.patch
        0007-Cygwin-__cxa-atexit.patch
        0008-Cygwin-libgomp-soname.patch
        0009-Cygwin-g-time.patch
        0010-Cygwin-newlib-ftm.patch
        0011-Cygwin-define-STD_UNIX.patch
        0101-Cygwin-enable-libgccjit-not-just-for-MingW.patch
        0102-Cygwin-testsuite-fixes-for-libgccjit.patch
        0950-11.2.0-configure-msys2.patch
        0951-11.2.0-msys2-spec.patch
        0953-11.2.0-testsuite-msys2.patch
        9000-cygming-extern-fix.patch
        9950-11.2.0-configure-msys2-aarch64.patch
        9951-11.2.0-msys2-spec-aarch64.patch
        9998-mingw-aarch64.patch
        9999-workarounds.patch)
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP')

_targets="aarch64-pc-msys"
#_targets="aarch64-pc-msys i686-pc-msys x86_64-pc-msys"

apply_patch_with_msg() {
  for _fname in "$@"
  do
    msg2 "Applying ${_fname}"
    patch -Nbp1 -F0 --verbose -i "${srcdir}"/${_fname}
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ] || [ -d $_fname ]; then
      rm -rf $_fname
    fi
  done
}

pkgver() {
  cd "$srcdir/$_realname"
  printf "%s.r%s.%s" "${_base_ver}" "$(git rev-list --count HEAD)" "$(git rev-parse --short=12 HEAD)"
}

prepare() {
  cd ${srcdir}/${_realname}

  # Remove files created by patches
  rm -f config/mt-cygwin \
    gcc/ada/system-cygwin-x86_64.ads \
    libgomp/config/cygwin/plugin-suffix.h \
    libgcc/config/i386/t-msys \
    libgcc/config/aarch64/t-cygming \
    libgcc/config/aarch64/t-msys \
    gcc/config/i386/msys.h \
    gcc/config/i386/msys-w64.h \
    gcc/config/i386/t-msys-w64 \
    gcc/config/aarch64/msys.h \
    gcc/config/aarch64/msys-w64.h \
    gcc/config/aarch64/t-msys-w64 > /dev/null 2>&1 | true

  # Cygwin patches
  apply_patch_with_msg \
    0001-Cygwin-use-SysV-ABI-on-x86_64.patch \
    0002-Cygwin-add-dummy-pthread-tsaware-and-large-address-a.patch \
    0003-Cygwin-handle-dllimport-properly-in-medium-model-V2.patch \
    0004-Cygwin-MinGW-skip-test.patch \
    0005-Cygwin-define-RTS_CONTROL_ENABLE-and-DTR_CONTROL_ENA.patch \
    0006-Cygwin-fix-some-implicit-declaration-warnings-and-re.patch \
    0007-Cygwin-__cxa-atexit.patch \
    0008-Cygwin-libgomp-soname.patch \
    0009-Cygwin-g-time.patch \
    0010-Cygwin-newlib-ftm.patch \
    0011-Cygwin-define-STD_UNIX.patch \
    0101-Cygwin-enable-libgccjit-not-just-for-MingW.patch \
    0102-Cygwin-testsuite-fixes-for-libgccjit.patch

  # MSYS2 Patches
  apply_patch_with_msg \
    9000-cygming-extern-fix.patch \
    0950-11.2.0-configure-msys2.patch \
    0951-11.2.0-msys2-spec.patch \
    0953-11.2.0-testsuite-msys2.patch \
    9950-11.2.0-configure-msys2-aarch64.patch \
    9951-11.2.0-msys2-spec-aarch64.patch \
    9998-mingw-aarch64.patch \
    9999-workarounds.patch

  # Do not run fixincludes
  #sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in
  echo ${pkgver} > gcc/BASE-VER
  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure

  for _target in ${_targets}; do
    [[ -d ${srcdir}/build-${_target} ]] && rm -rf ${srcdir}/build-${_target}
    mkdir ${srcdir}/build-${_target}
  done
}

build() {
  # libgcc is built with -g0, but INHIBIT_LIBC_CFLAGS can
  # be used to undo that.
  if check_option "debug" "y"; then
    export INHIBIT_LIBC_CFLAGS="-g2"
  fi

  # using -pipe causes spurious test-suite failures
  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48565
  CFLAGS=${CFLAGS/-pipe/}
  CXXFLAGS=${CXXFLAGS/-pipe/}

  export lt_cv_deplibs_check_method='pass_all'

  for _target in ${_targets}; do
    cd ${srcdir}/build-${_target}

    case ${_target} in
      i686*)
        _arch_conf="--with-arch=pentium4 --with-tune=generic --disable-sjlj-exceptions"
      ;;
      x86_64*)
        _arch_conf="--with-arch=nocona --with-tune=generic"
      ;;
      aarch64*)
        _arch_conf=""
      ;;
    esac

    # TODO: Remove --enable-decimal-float=no
    ${srcdir}/${_realname}/configure \
      --prefix=/usr \
      --build=${CHOST} \
      --host=${CHOST} \
      --target=${_target} \
      --enable-version-specific-runtime-libs \
      --disable-multilib \
      ${_arch_conf} \
      --enable-__cxa_atexit \
      --with-dwarf2 \
      --without-headers \
      --enable-languages=c \
      --enable-decimal-float=no \
      --enable-graphite \
      --enable-threads=posix \
      --disable-libatomic \
      --disable-libgomp \
      --disable-libitm \
      --disable-libstdcxx \
      --disable-libssp \
      --disable-win32-registry \
      --disable-symvers \
      --with-gnu-ld \
      --with-gnu-as \
      --disable-isl-version-check \
      --enable-checking=release \
      --without-libiconv-prefix \
      --without-libintl-prefix \
      --with-system-zlib \
      --enable-linker-build-id

    make
  done
}

package_cross-gcc-stage1()
{
  pkgdesc="The GNU Compiler Collection - C and C++ frontends"
  depends=('cross-binutils' 'gmp' 'isl' 'mpc' 'mpfr' 'msys2-runtime-devel' 'msys2-w32api-headers' 'msys2-w32api-runtime' 'windows-default-manifest')
  provides=('msys2-devel')

  for _target in ${_targets}; do
    cd ${srcdir}/build-${_target}

    if check_option "strip" "n"; then
      export STRIP=true
    fi

    make -j1 DESTDIR=${pkgdir} install

    # remove all DLLs
    rm -f ${pkgdir}/usr/bin/*.dll

    # remove files provided by gcc
    rm -rf ${pkgdir}/usr/share
  done
}
