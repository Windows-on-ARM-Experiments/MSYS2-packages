# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=gcc
_mingw_suff=mingw-w64-cross
pkgbase="${_mingw_suff}-mingwarm64-${_realname}"
_targetpkgs=("${_mingw_suff}-mingwarm64-${_realname}-stage1")
pkgname=("${_targetpkgs[@]}")
provides=("${_mingw_suff}-mingwarm64-${_realname}")
_realver=15.0.1
pkgver=15.0.1dev
pkgrel=3
pkgdesc="Cross GCC for the MinGW-w64 (stage1)"
arch=('aarch64' 'i686' 'x86_64')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
msys2_references=(
  'archlinux: gcc'
  'cpe: cpe:/a:gnu:gcc'
)
groups=("${_mingw_suff}-toolchain" "${_mingw_suff}")
depends=("zlib" "mpc" "isl" "libzstd")
makedepends=("gcc" 'lndir' "gmp-devel" "mpc-devel" "zlib-devel" "isl-devel" 'autotools' 'gperf' 'libzstd-devel'
             "${_mingw_suff}-mingwarm64-headers" "${_mingw_suff}-mingwarm64-binutils" "git")
#checkdepends=('dejagnu')
options=('!strip' 'staticlibs' '!emptydirs' '!buildflags')
source=("${_realname}"::"git+https://github.com/Windows-on-ARM-Experiments/gcc-woarm64.git#branch=fix-va-list"
        0012-Handle-spaces-in-path-for-default-manifest.patch
        0014-gcc-9-branch-clone_function_name_1-Retain-any-stdcall-suffix.patch
        0020-libgomp-Don-t-hard-code-MS-printf-attributes.patch
        0200-add-m-no-align-vector-insn-option-for-i386.patch)
sha256sums=('SKIP'
            'e98805ead7d78ee2a92f237894c4b2b7ddc1688e1b517d8c04f28d440202e40f'
            'fd9bdecb2bbc4796bbc9f00b708dac42ef9e3464a06d6d27e5475cee117de5be'
            'ad1f7b5e7afaaec008b7cbd14feea13a10989fa91bda7003af72d457619bb199'
            'caf8f789c5eb63b4bb6e658a7eeb0c021b6cfe21029203de3e7f7e044487e3ed')

_threads="win32"

apply_patch_with_msg() {
  for _fname in "$@"
  do
    msg2 "Applying ${_fname}"
    patch -Nbp1 -i "${srcdir}"/${_fname}
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ] || [ -d $_fname ]; then
      rm -rf $_fname
    fi
  done
}

prepare() {
  cd ${srcdir}/${_realname}

  del_file_exists \
    libgomp/config/cygwin/plugin-suffix.h

  # MinGW Patches
  apply_patch_with_msg \
    0012-Handle-spaces-in-path-for-default-manifest.patch \
    0014-gcc-9-branch-clone_function_name_1-Retain-any-stdcall-suffix.patch \
    0020-libgomp-Don-t-hard-code-MS-printf-attributes.patch \
    0200-add-m-no-align-vector-insn-option-for-i386.patch
}

_build() {
  _target=$1
  export lt_cv_deplibs_check_method='pass_all'

  mkdir -p ${srcdir}/gcc-build-${_target} && cd ${srcdir}/gcc-build-${_target}

  local _langs="c,lto"
  case "${_target}" in
    aarch64*)
      local _arch=armv8.1-a
      local _tune=cortex-x1
      local _conf=""
    ;;
  esac

  local CYGWIN_CHOST="${CHOST/-msys/-cygwin}"
  ../${_realname}/configure \
    --prefix=/opt \
    --build=${CYGWIN_CHOST} \
    --host=${CYGWIN_CHOST} \
    --target=${_target} \
    --libexecdir=/opt/lib \
    --disable-bootstrap \
    --with-arch=${_arch} \
    --with-tune=${_tune} \
    --enable-languages=${_langs} \
    --disable-shared \
    --enable-static \
    --disable-isl-version-check \
    --disable-libssp \
    --disable-multilib \
    --disable-plugins \
    --disable-libatomic \
    --disable-libquadmath \
    --disable-nls \
    --disable-rpath \
    --disable-win32-registry \
    --disable-werror \
    --disable-symvers \
    --with-system-zlib \
    --with-gnu-as \
    --with-gnu-ld \
    --without-headers \
    ${_conf} \
    CFLAGS="-O2 -pipe" \
    CXXFLAGS="-O2 -pipe"

  make -j$(nproc) all
}

_package() {
  _target=$1
  cd ${srcdir}/gcc-build-${_target}
  make -j$(nproc) DESTDIR=${pkgdir} install
  for _f in ${pkgdir}/opt/bin/*.exe; do
    strip -s ${_f}
  done
  for _f in ${pkgdir}/opt/lib/gcc/${_target}/${_realver}/*.exe; do
    strip -s ${_f}
  done
  rm -rf ${pkgdir}/opt/share
}

build() {
  for _pkg in "${_targetpkgs[@]}"; do
    case "$_pkg" in
      "${_mingw_suff}-mingwarm64-${_realname}-stage1") _build "aarch64-w64-mingw32" ;;
    esac
  done
}

package_mingw-w64-cross-mingwarm64-gcc-stage1() {
  conflicts=("${_mingw_suff}-${_realname}<=14.2.0-1")
  depends+=(
    "${_mingw_suff}-mingwarm64-headers"
    "${_mingw_suff}-mingwarm64-binutils"
  )
  _package "aarch64-w64-mingw32"
}
