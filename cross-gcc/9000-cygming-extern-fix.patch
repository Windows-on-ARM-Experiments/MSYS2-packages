diff --git a/gcc/config/aarch64/cygming.h b/gcc/config/aarch64/cygming.h
index 20992ef4312..31d87f23d01 100644
--- a/gcc/config/aarch64/cygming.h
+++ b/gcc/config/aarch64/cygming.h
@@ -56,41 +56,12 @@ along with GCC; see the file COPYING3.  If not see
 // #define LOCAL_LABEL_PREFIX (TARGET_64BIT ? "." : "")
 
 #include <stdbool.h>
-#ifdef __MINGW32__
-#include <stdio.h>
-#endif
 
 #undef TARGET_SEH
 #define TARGET_SEH  1
 
 #define TARGET_ASM_NAMED_SECTION  aarch64_pe_asm_named_section
 
-/* SEH support */
-extern void aarch64_pe_seh_init (FILE *);
-extern void aarch64_pe_seh_end_prologue (FILE *);
-extern void aarch64_pe_seh_function_prologue (FILE *);
-extern void aarch64_pe_seh_cold_init (FILE *, const char *);
-extern void aarch64_pe_seh_unwind_emit (FILE *, rtx_insn *);
-extern void aarch64_pe_seh_emit_except_personality (rtx);
-extern void aarch64_pe_seh_init_sections (void);
-extern void aarch64_pe_seh_asm_final_postscan_insn (FILE *stream, rtx_insn *insn, rtx*, int);
-
-/* In aarch64_c */
-extern void aarch64_pe_asm_named_section (const char *, unsigned int, tree);
-extern bool aarch64_pe_valid_dllimport_attribute_p (const_tree);
-extern void aarch64_pe_maybe_record_exported_symbol (tree, const char *, int);
-
-/* In winnt */
-extern void aarch64_print_reg (rtx, int, FILE*);
-extern void aarch64_pe_end_function (FILE *f, const char *, tree);
-extern void aarch64_pe_end_cold_function (FILE *f, const char *, tree);
-extern void aarch64_pe_end_epilogue (FILE *file);
-extern void aarch64_pe_begin_epilogue (FILE *file);
-extern void aarch64_pe_file_end (void);
-extern void aarch64_pe_declare_function_type (FILE *file, const char *name, int pub);
-extern void aarch64_pe_record_external_function (tree decl, const char *name);
-extern void aarch64_pe_record_stub (const char *name);
-
 #define TARGET_VALID_DLLIMPORT_ATTRIBUTE_P aarch64_pe_valid_dllimport_attribute_p
 
 #define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1
 
-#define TARGET_OS_CPP_BUILTINS()                                 \
-  do                                                            \
-    {                                                           \
-      builtin_define ("__MSVCRT__");                            \
-      builtin_define ("__MINGW32__");                           \
-      builtin_define ("_WIN32");                                \
-      builtin_define ("__SEH__");                               \
-      builtin_define_std ("WIN32");                             \
-      builtin_define_std ("WINNT");                             \
-      builtin_define_with_int_value ("_INTEGRAL_MAX_BITS",      \
-				     TYPE_PRECISION (intmax_type_node));\
-      builtin_define ("__MINGW64__");                       \
-      builtin_define_std ("WIN64");                         \
-      builtin_define ("_WIN64");                            \
-      builtin_define ("__stdcall=__attribute__((__stdcall__))");      \
-      builtin_define ("__fastcall=__attribute__((__fastcall__))");    \
-      builtin_define ("__thiscall=__attribute__((__thiscall__))");    \
-      builtin_define ("__cdecl=__attribute__((__cdecl__))");          \
-    }                                                           \
-  while (0)
+#define TARGET_OS_CPP_BUILTINS()					\
+  do {									\
+    if (TARGET_SEH)							\
+      builtin_define ("__SEH__");					\
+    builtin_define ("__stdcall=__attribute__((__stdcall__))");		\
+    builtin_define ("__fastcall=__attribute__((__fastcall__))");	\
+    builtin_define ("__thiscall=__attribute__((__thiscall__))");	\
+    builtin_define ("__cdecl=__attribute__((__cdecl__))");		\
+    EXTRA_OS_CPP_BUILTINS ();			 			\
+  } while (0)
 
 /* Windows64 continues to use a 32-bit long type.  */
 #undef LONG_TYPE_SIZE
--- a/gcc/config/aarch64/aarch64-protos.h
+++ b/gcc/config/aarch64/aarch64-protos.h
@@ -744,6 +745,32 @@ private:
   bool m_old_general_regs_only;
 };
 
+/* SEH support */
+extern void aarch64_pe_seh_init (FILE *);
+extern void aarch64_pe_seh_end_prologue (FILE *);
+extern void aarch64_pe_seh_function_prologue (FILE *);
+extern void aarch64_pe_seh_cold_init (FILE *, const char *);
+extern void aarch64_pe_seh_unwind_emit (FILE *, rtx_insn *);
+extern void aarch64_pe_seh_emit_except_personality (rtx);
+extern void aarch64_pe_seh_init_sections (void);
+extern void aarch64_pe_seh_asm_final_postscan_insn (FILE *stream, rtx_insn *insn, rtx*, int);
+
+/* In aarch64_c */
+extern void aarch64_pe_asm_named_section (const char *, unsigned int, tree);
+extern bool aarch64_pe_valid_dllimport_attribute_p (const_tree);
+extern void aarch64_pe_maybe_record_exported_symbol (tree, const char *, int);
+
+/* In winnt */
+extern void aarch64_print_reg (rtx, int, FILE*);
+extern void aarch64_pe_end_function (FILE *f, const char *, tree);
+extern void aarch64_pe_end_cold_function (FILE *f, const char *, tree);
+extern void aarch64_pe_end_epilogue (FILE *file);
+extern void aarch64_pe_begin_epilogue (FILE *file);
+extern void aarch64_pe_file_end (void);
+extern void aarch64_pe_declare_function_type (FILE *file, const char *name, int pub);
+extern void aarch64_pe_record_external_function (tree decl, const char *name);
+extern void aarch64_pe_record_stub (const char *name);
+
 void aarch64_post_cfi_startproc (void);
 poly_int64 aarch64_initial_elimination_offset (unsigned, unsigned);
 int aarch64_get_condition_code (rtx);
--- a/gcc/config/aarch64/winnt.cc
+++ b/gcc/config/aarch64/winnt.cc
@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see
 #include "options.h"
 #include "memmodel.h"
 #include "emit-rtl.h"
+#include "aarch64-protos.h"
 
 #define TARGET_SEH 1
 
